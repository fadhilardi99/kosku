// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  favorites Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Kos {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique // Added for URL lookup
  address       String
  price         BigInt
  originalPrice BigInt?
  rating        Float
  reviews       BigInt   @default(0)
  type          String
  images        String   // JSON string of image URLs
  description   String
  fasilitas     String   // JSON string of facilities
  rules         String   // JSON string of rules
  locationAddress String  @map("location.address")
  locationMap   String   @map("location.map")
  phone         String
  whatsapp      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  favorites Favorite[]

  @@map("kos")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  kosId     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kos  Kos  @relation(fields: [kosId], references: [id], onDelete: Cascade)

  @@unique([userId, kosId])
}
